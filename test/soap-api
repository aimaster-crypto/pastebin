import os
import sys
from zeep import Client
import requests

OLLAMA_MODEL = "llama3"  # Change if you're using codellama, mistral, etc.

def parse_wsdl(wsdl_path):
    client = Client(wsdl_path)
    service = list(client.wsdl.services.values())[0]
    port = list(service.ports.values())[0]
    operations = port.binding._operations

    op_list = []
    for name, op in operations.items():
        input_params = [p.name for p in op.input.body.parts]
        op_list.append({
            "operation": name,
            "params": input_params
        })
    return op_list

def read_soap_impl_files(folder_path):
    soap_code = ""
    for fname in os.listdir(folder_path):
        if fname.endswith(".java"):
            with open(os.path.join(folder_path, fname), "r") as f:
                soap_code += f"\n\n// FILE: " + fname + "\n" + f.read()
    return soap_code

def build_prompt(operations, soap_code):
    prompt = """You are a software engineer helping to migrate a SOAP service to a REST API.

1. Below is a list of operations extracted from the WSDL.
2. Also provided is the current Java SOAP implementation.

**Your tasks:**
- Generate an OpenAPI 3.0 YAML spec for the service.
- Create a Spring Boot REST controller that calls the same logic from the SOAP impl.
- Use meaningful types and keep method names consistent.
- Return results in JSON.
- Start the controller after the line `---JAVA---`.

WSDL Operations:\n"""
    for op in operations:
        prompt += f"- {op['operation']}({', '.join(op['params'])})\n"

    prompt += "\nJava SOAP Implementation:\n"
    prompt += soap_code[:4000]  # Truncate for model context if needed
    return prompt

def query_ollama(prompt, model=OLLAMA_MODEL):
    response = requests.post(
        "http://localhost:11434/api/generate",
        json={"model": model, "prompt": prompt, "stream": False}
    )
    if response.status_code == 200:
        return response.json()["response"]
    else:
        raise Exception(f"Ollama error: {response.status_code}\n{response.text}")

def split_output(output):
    if "---JAVA---" in output:
        oas, java = output.split("---JAVA---", 1)
        return oas.strip(), java.strip()
    return output.strip(), ""

def main(wsdl_file, impl_folder):
    print("ðŸ“¦ Parsing WSDL...")
    operations = parse_wsdl(wsdl_file)

    print("ðŸ“„ Reading SOAP implementation...")
    soap_code = read_soap_impl_files(impl_folder)

    prompt = build_prompt(operations, soap_code)
    print("ðŸ§  Sending to Ollama...")
    response = query_ollama(prompt)
    oas, java = split_output(response)

    with open("openapi.yaml", "w") as f:
        f.write(oas)
    with open("SoapRestController.java", "w") as f:
        f.write(java)

    print("âœ… Done: Generated `openapi.yaml` and `SoapRestController.java`.")

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python soap_to_rest_ollama.py <wsdl_file> <impl_folder>")
    else:
        main(sys.argv[1], sys.argv[2])
